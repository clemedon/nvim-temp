"   toggle .hpp/.cpp
function cpp#SwitchHppCpp()
    if  (expand('%:t:r') =~# "[A-Z]")
        if match(expand('%:e'), 'cpp')
            execute 'find ' . expand("%:t:r") . '.cpp'
        elseif match(expand('%:e'), 'hpp')
            execute 'find ' . expand("%:t:r") . '.hpp'
        endif
    endif
endfunction

"   coplien class template
function cpp#ClassInitCpp()
    if  (expand("%:e") == "cpp")
        if  (expand(line('$')) == 1 && getline(1) =~ '^$')
            "   Class.cpp
            let className = expand("%:t:r")
            call append(line("$"), "#include <iostream>")
            call append(line("$"), "#include <string>")
            call append(line("$"), "")
            call append(line("$"), "#include \"" . className . ".hpp\"")
            call append(line("$"), "")
            call append(line("$"), "/*  CANON")
            call append(line("$"), "------------------------------------------------- */")
            call append(line("$"), "")
            call append(line("$"), "" . className . "::" . className . "( void ) {")
            call append(line("$"), "  return;")
            call append(line("$"), "}")
            call append(line("$"), "")
            call append(line("$"), "" . className . "::" . className . "( " . className . " const& src ) {")
            call append(line("$"), "  *this = src;")
            call append(line("$"), "  return;")
            call append(line("$"), "}")
            call append(line("$"), "")
            call append(line("$"), "" . className . "::~" . className . "( void ) {")
            call append(line("$"), "  return;")
            call append(line("$"), "}")
            call append(line("$"), "")
            call append(line("$"), "" . className . "& " . className . "::operator=( " . className . " const& rhs ) {")
            call append(line("$"), "  if( this == &rhs ) {")
            call append(line("$"), "    return *this;")
            call append(line("$"), "  }")
            call append(line("$"), "  return *this;")
            call append(line("$"), "}")
            call append(line("$"), "")
            call append(line("$"), "void " . className . "::print( std::ostream& o ) const {")
            call append(line("$"), "  o << \"\";  // TODO")
            call append(line("$"), "  return;")
            call append(line("$"), "}")
            call append(line("$"), "")
            call append(line("$"), "std::ostream& operator<<( std::ostream& o, " . className . " const& i ) {")
            call append(line("$"), "  i.print( o );")
            call append(line("$"), "  return o;")
            call append(line("$"), "}")
            call append(line("$"), "")
            call append(line("$"), "/* ---------------------------------------------- */")
            0delete
            call search("void")
        endif
    elseif  (expand("%:e") == "hpp")
        if  (expand(line('$')) == 1 && getline(1) =~ '^$')
            "   Class.hpp
            let className = expand("%:t:r")
            let includeGuard = toupper (className . '_HPP_')
            call append(line("$"), "#ifndef " . includeGuard)
            call append(line("$"), "#define " . includeGuard)
            call append(line("$"), "")
            call append(line("$"), "#include <iosfwd>")
            call append(line("$"), "#include <string>")
            call append(line("$"), "")
            call append(line("$"), "class " . className . " {")
            call append(line("$"), " public:")
            call append(line("$"), "  " . className . "( void );")
            call append(line("$"), "  " . className . "( " . className . " const& src );")
            call append(line("$"), "  virtual ~" . className . "( void );")
            call append(line("$"), "  " . className . "& operator=( " . className . " const& rhs );")
            call append(line("$"), "  virtual void print( std::ostream& o ) const;")
            call append(line("$"), "")
            call append(line("$"), " private:")
            call append(line("$"), "};")
            call append(line("$"), "")
            call append(line("$"), "std::ostream& operator<<( std::ostream& o, " . className . " const& i );")
            call append(line("$"), "")
            call append(line("$"), "#endif  // " . includeGuard)
            0delete
            call search("void")
        elseif !(getline(expand(line('$'))) =~ '#endif') && !(getline(1) =~ '#ifndef')
            "   Class.hpp include guard
            let className = expand("%:t:r")
            let includeGuard = toupper (className . '_HPP_')
            call append(1, "#ifndef " . includeGuard)
            call append(2, "#define " . includeGuard)
            call append(3, "")
            call append(line("$"), "")
            call append(line("$"), "#endif  // " . includeGuard)
        endif
    endif
endfunction
